// <auto-generated />
using System;
using BellumGens.Api.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BellumGens.Api.Core.Migrations
{
    [DbContext(typeof(BellumGensDbContext))]
    [Migration("20201124144836_Languages")]
    partial class Languages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BellumGens.Api.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Accuracy")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("AvatarFull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BattleNetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ESEA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal>("HeadshotPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("KillDeathRatio")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PreferredPrimaryRole")
                        .HasColumnType("int");

                    b.Property<int>("PreferredSecondaryRole")
                        .HasColumnType("int");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegisteredOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("SearchVisible")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SteamPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("TwitchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.BellumGensPushSubscription", b =>
                {
                    b.Property<string>("p256dh")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("auth")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("expirationTime")
                        .HasColumnType("time");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("p256dh", "auth");

                    b.HasIndex("userId");

                    b.ToTable("PushSubscriptions");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOMatchMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CSGOMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<int>("Team1Score")
                        .HasColumnType("int");

                    b.Property<int>("Team2Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamBanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamPickId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CSGOMatchId");

                    b.HasIndex("TeamBanId");

                    b.HasIndex("TeamPickId");

                    b.ToTable("TournamentCSGOMatchMaps");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomUrl")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorMetadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<string>("PrivateShareLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<string>("StratImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique()
                        .HasFilter("[CustomUrl] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOTeam", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomUrl")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegisteredOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SteamGroupId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TeamAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("TeamId");

                    b.HasIndex("CustomUrl")
                        .IsUnique()
                        .HasFilter("[CustomUrl] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.Company", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.JerseyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cut")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("JerseyDetails");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.JerseyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Shipped")
                        .HasColumnType("bit");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PromoCode");

                    b.ToTable("JerseyOrders");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.Promo", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.SC2MatchMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<string>("PlayerBanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerPickId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SC2MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerBanId");

                    b.HasIndex("PlayerPickId");

                    b.HasIndex("SC2MatchId");

                    b.ToTable("TournamentSC2MatchMaps");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.StrategyComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Published")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("StratId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StratId");

                    b.HasIndex("UserId");

                    b.ToTable("StrategyComments");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.StrategyVote", b =>
                {
                    b.Property<Guid>("StratId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("StratId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StrategyVote");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.Subscriber", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SubKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("bit");

                    b.HasKey("Email");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamApplication", b =>
                {
                    b.Property<string>("ApplicantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Sent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("ApplicantId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamApplications");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamAvailability", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TeamId", "Day");

                    b.ToTable("TeamPracticeSchedule");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamInvite", b =>
                {
                    b.Property<string>("InvitingUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvitedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Sent")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("InvitingUserId", "InvitedUserId", "TeamId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamInvites");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamMapPool", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit");

                    b.HasKey("TeamId", "Map");

                    b.ToTable("TeamMapPool");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamMember", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BattleNetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TournamentCSGOGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TournamentSC2GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentCSGOGroupId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentSC2GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("TournamentApplications");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentCSGOGroups");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DemoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NoShow")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Team1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Team1Points")
                        .HasColumnType("int");

                    b.Property<Guid>("Team2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Team2Points")
                        .HasColumnType("int");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentCSGOMatches");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentSC2Groups");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DemoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NoShow")
                        .HasColumnType("bit");

                    b.Property<string>("Player1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Player1Points")
                        .HasColumnType("int");

                    b.Property<string>("Player2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Player2Points")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentSC2Matches");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserAvailability", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserId", "Day");

                    b.ToTable("UserAvailabilities");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserMapPool", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "Map");

                    b.ToTable("UserMapPool");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.BellumGensPushSubscription", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOMatchMap", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.TournamentCSGOMatch", "Match")
                        .WithMany("Maps")
                        .HasForeignKey("CSGOMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "BanningTeam")
                        .WithMany()
                        .HasForeignKey("TeamBanId");

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "PickingTeam")
                        .WithMany()
                        .HasForeignKey("TeamPickId");

                    b.Navigation("BanningTeam");

                    b.Navigation("Match");

                    b.Navigation("PickingTeam");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOStrategy", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("Strategies")
                        .HasForeignKey("TeamId");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.JerseyDetails", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.JerseyOrder", "Order")
                        .WithMany("Jerseys")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.JerseyOrder", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.Promo", "Promo")
                        .WithMany()
                        .HasForeignKey("PromoCode");

                    b.Navigation("Promo");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.SC2MatchMap", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "BanningPlayer")
                        .WithMany()
                        .HasForeignKey("PlayerBanId");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "PickingPlayer")
                        .WithMany()
                        .HasForeignKey("PlayerPickId");

                    b.HasOne("BellumGens.Api.Core.Models.TournamentSC2Match", "Match")
                        .WithMany("Maps")
                        .HasForeignKey("SC2MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BanningPlayer");

                    b.Navigation("Match");

                    b.Navigation("PickingPlayer");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.StrategyComment", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOStrategy", "Strategy")
                        .WithMany("Comments")
                        .HasForeignKey("StratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Strategy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.StrategyVote", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOStrategy", "Strategy")
                        .WithMany("Votes")
                        .HasForeignKey("StratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamApplication", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany("TeamApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("Applications")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamAvailability", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("PracticeSchedule")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamInvite", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "InvitedUser")
                        .WithMany("Notifications")
                        .HasForeignKey("InvitedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "InvitingUser")
                        .WithMany()
                        .HasForeignKey("InvitingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("Invites")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("InvitingUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamMapPool", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("MapPool")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TeamMember", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "Member")
                        .WithMany("MemberOf")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentApplication", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("BellumGens.Api.Core.Models.TournamentCSGOGroup", "CSGOGroup")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentCSGOGroupId");

                    b.HasOne("BellumGens.Api.Core.Models.Tournament", "Tournament")
                        .WithMany("Applications")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.TournamentSC2Group", "SC2Group")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentSC2GroupId");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("CSGOGroup");

                    b.Navigation("SC2Group");

                    b.Navigation("Team");

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOGroup", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.Tournament", "Tournament")
                        .WithMany("CSGOGroups")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOMatch", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.TournamentCSGOGroup", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.CSGOTeam", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.Tournament", "Tournament")
                        .WithMany("CSGOMatches")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Group");

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Group", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.Tournament", "Tournament")
                        .WithMany("SC2Groups")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Match", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.TournamentSC2Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.HasOne("BellumGens.Api.Core.Models.Tournament", "Tournament")
                        .WithMany("SC2Matches")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Group");

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserAvailability", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany("Availability")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserMapPool", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "User")
                        .WithMany("MapPool")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.UserMessage", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "SendingUser")
                        .WithMany()
                        .HasForeignKey("From");

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", "ReceivingUser")
                        .WithMany()
                        .HasForeignKey("To");

                    b.Navigation("ReceivingUser");

                    b.Navigation("SendingUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BellumGens.Api.Core.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("MapPool");

                    b.Navigation("MemberOf");

                    b.Navigation("Notifications");

                    b.Navigation("TeamApplications");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOStrategy", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.CSGOTeam", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Invites");

                    b.Navigation("MapPool");

                    b.Navigation("Members");

                    b.Navigation("PracticeSchedule");

                    b.Navigation("Strategies");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.JerseyOrder", b =>
                {
                    b.Navigation("Jerseys");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.Tournament", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CSGOGroups");

                    b.Navigation("CSGOMatches");

                    b.Navigation("SC2Groups");

                    b.Navigation("SC2Matches");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOGroup", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentCSGOMatch", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Group", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("BellumGens.Api.Core.Models.TournamentSC2Match", b =>
                {
                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
